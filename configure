#!/bin/bash


if [ "$1" = "-h" -o "$1" = "--help" -o "$1" = "-help" ]; then
    echo "** valid options:"
    echo "  --with_gtk3     : compile with GTK+ 3.x"
    echo "  --use_xim=N     : disable the support of XIM"
    echo "  --prefix=path   : install prefix (e.g. /usr)"
#   TODO fix not working option(s)
#   echo "  --use_tray=N    : disable system tray"
    echo "  --use_i18n=N    : disable i18n"
    echo "  --use_tsin=N    : disable Tsin input method"
    echo "  --use_anthy=N   : disable Anthy input method"
    echo "  --use_chewing=N : disable Chewing input method"
    echo "  --use_qt3=Y     : enable Qt 3.x immodule"
    echo "  --use_qt4=N     : disable Qt 4.x immodule"
    echo "  --qt3-moc-path  : specify the path of \"moc\" tool for Qt3."
    echo "  --qt4-moc-path  : specify the path of \"moc\" tool for Qt4."
    echo "  --use_gtk=N     : disable GTK+ 2.x immodule"
    echo "  --use_gtk3=N    : disable GTK+ 3.x immodule"
    exit
fi


MAKE=make
which gmake > /dev/null 2> /dev/null
if [ $? = 0 ]; then
  MAKE=gmake
fi

FREEBSD=0
uname | grep FreeBSD > /dev/null 2> /dev/null
if [ $? = 0 ]; then
  FREEBSD=1
fi

uname | grep OpenBSD > /dev/null 2> /dev/null
if [ $? = 0 ]; then
  FREEBSD=1
fi

SO_FLAGS="-shared"
MAC_OS=0
uname | grep Darwin > /dev/null 2> /dev/null
if [ $? = 0 ]; then
  FREEBSD=1
  MAC_OS=1
  SO_FLAGS="-dynamic -bundle -undefined suppress -flat_namespace"
fi

prefix="/usr/local"
use_xim='Y'
use_tray='Y'
use_i18n='Y'
use_tsin='Y'
use_anthy='Y'
use_chewing='Y'
# Qt3 immodule patch is not included in official Qt3 release.
# Some distros do not apply that patch and will always build failure.
# We should turn off Qt3 immodule by default.
use_qt3='N'
use_qt4='Y'
use_gtk='Y'
use_gtk3='Y'

function find_in_path_list_to_variable() {
    # find_in_path_list_to_variable() will find all elements in the array name stored in $1
    # if found, set the found path to variable name in $2 and return 0
    # otherwise return 1.
	 
	 eval "L=(\${"${1}"[@]})"
	 for path in ${L[@]}; do
		  if [ -x "$path" ]; then
				eval $2=\"$path\"
				return 0
		  fi
	 done
	 return 1
}

qt4_moc_path_list=(
	 "/usr/share/qt4/bin/moc"	#debian (Thanks to medicalwei)
	 "/usr/lib/qt4/bin/moc"	# fedora (Thanks to petercommand)
	 "/usr/bin/moc-qt4"	# fedora (Thanks to petercommand)
	 "/usr/local/bin/moc"	# slackware	# always keep generic name with lower priority
	 "/usr/bin/moc"			# arch	# always keep generic name with lower priority
)

qt3_moc_path_list=(
	 "/usr/share/qt3/bin/moc"	#debian
	 "/opt/qt/bin/moc"			# always keep generic name with lower priority
)

if [ "$HIME_USE_XIM" ]; then
  use_xim=$HIME_USE_XIM
fi

for opt do
  case "$opt" in
  --with_gtk3) GTK=gtk+-3.0
  ;;
  --prefix=*) prefix=`echo $opt | cut -d '=' -f 2`
  ;;
  --use_xim=*) use_xim=`echo $opt | cut -d '=' -f 2`
  ;;
  --use_tray=*) use_tray=`echo $opt | cut -d '=' -f 2`
  ;;
  --use_i18n=*) use_i18n=`echo $opt | cut -d '=' -f 2`
  ;;
  --use_tsin=*) use_tsin=`echo $opt | cut -d '=' -f 2`
  ;;
  --use_anthy=*) use_anthy=`echo $opt | cut -d '=' -f 2`
  ;;
  --use_chewing=*) use_chewing=`echo $opt | cut -d '=' -f 2`
  ;;
  --use_qt3=*) use_qt3=`echo $opt | cut -d '=' -f 2`
  ;;
  --use_qt4=*) use_qt4=`echo $opt | cut -d '=' -f 2`
  ;;
  --use_gtk=*) use_gtk=`echo $opt | cut -d '=' -f 2`
  ;;
  --use_gtk3=*) use_gtk3=`echo $opt | cut -d '=' -f 2`
  ;;
  --qt3-moc-path=*) QT3_MOC_PATH=`echo $opt | cut -d '=' -f 2`
  ;;
  --qt4-moc-path=*) QT4_MOC_PATH=`echo $opt | cut -d '=' -f 2`
  ;;
  esac
done

echo "prefix: $prefix"

if [ -z "$GTK" ]; then
  GTK=gtk+-2.0
fi

echo -n ".... Testing $GTK : "

GTKINC=`pkg-config --cflags $GTK`

if [ $? != 0 ]; then
  GTK=gtk+-3.0
  echo -n ".... Testing $GTK : "
  
  GTKINC=`pkg-config --cflags $GTK`
  
  if [ $? != 0 ]; then
    echo "$GTK or above required --cflags"
    rm -f config.mak
    exit -1;
  fi
fi

## problem in MacOS, by candyz
if [ $MAC_OS = 1 ]; then
  GTKINC="-I/sw/include `pkg-config --cflags $GTK`"
fi

if [ ! -x /bin/bash ]; then
  for i in /usr/bin/bash /usr/local/bin/bash
  do
    [ -x $i ] || continue
    echo "/bin/bash -> $i"
    for i in scripts/*
    do
      sed -e "s~/bin/bash~$i~" < $i > $i.tmp
      mv $i.tmp $i
    done
  done
fi


GTKLDFLAGS=`pkg-config --libs $GTK`

if [ $? != 0 ]; then
  echo "$GTK or above required --libs"
  echo "please install rpm/package libgtk+2.0_0-devel"
  rm -f config.mak
  exit -1;
else
  echo " found."
fi

echo -n ".... Testing anthy    :  "
USE_ANTHY=`pkg-config --libs anthy`
if [ $? != 0 ]; then
  USE_ANTHY=N
  echo "It's ok if you don't want anthy support."
else
  if [ $use_anthy = "N" ]; then
    USE_ANTHY='N'
    echo "disabled."
  else
    USE_ANTHY='Y'
    echo "found."
  fi
fi

echo -n ".... Testing chewing  :  "
USE_CHEWING=`pkg-config --libs chewing`
if [ $? != 0 ]; then
  USE_CHEWING=N
  echo "It's ok if you don't want libchewing support."
else
  if [ $use_chewing = "N" ]; then
    USE_CHEWING='N'
    echo "disabled."
  else
    USE_CHEWING='Y'
    echo "found."
  fi
fi


LIB='lib'
if [ -d /usr/lib64 -a -d /lib64 ]; then
LIB='lib64'
fi
DEBIAN_LD=`ld -v 2>&1 | grep -i debian`
UBUNTU_LD=`ld -v 2>&1 | grep -i ubuntu`
if [ "$DEBIAN_LD" != "" -o "$UBUNTU_LD" != "" ]; then
  LIB='lib'
fi

# --- QT3 START ---
QT_IM='N'
QT_IM_DIR=/usr/$LIB/qt3/plugins/inputmethods
echo "testing if you have qt3 support"
pkg-config --libs qt-mt > /dev/null 2> /dev/null
if [ $? = 0 ]; then
  QT_IM='Y'
fi

if [ ! -x "$QT3_MOC_PATH" ]; then
	 find_in_path_list_to_variable "qt3_moc_path_list" "QT3_MOC_PATH"
fi

if [ $QT_IM = "Y" ]; then
    if [ $use_qt3 = "N" ]; then
        QT_IM='N'
        echo "-> Yes, but disabled."
    else
		  if [ ! -x "$QT3_MOC_PATH" ]; then
				echo "-> Fail, cannot find \"moc\" tool for Qt3."
				echo "Hint: use the --qt3-moc-path option."
				exit 1
		  fi
        echo "-> Yes, you have Qt3 support."
    fi
else
    echo "-> No, you don't have. It's ok if you don't want Qt3 immodule."
fi
# --- QT3 END ---

# --- QT4 START ---
QT4_IM='N'
QT4_IM_DIR=/usr/$LIB/qt4/plugins/inputmethods
echo "testing if you have qt4 support"
pkg-config --libs QtCore QtGui > /dev/null 2> /dev/null
if [ $? = 0 ]; then
  QT4_IM='Y'
fi

if [ ! -x "${QT4_MOC_PATH}" ]; then
	 find_in_path_list_to_variable "qt4_moc_path_list" "QT4_MOC_PATH"
fi

if [ $QT4_IM = "Y" ]; then
    if [ $use_qt4 = "N" ]; then
        QT4_IM='N'
        echo "-> Yes, but disabled."
    else
		  if [ ! -x "$QT4_MOC_PATH" ]; then
				echo "-> Fail, cannot find \"moc\" tool for Qt4."
				echo "Hint: use the --qt4-moc-path option."
				exit 1
		  fi		  
        echo "-> Yes, you have Qt4 support."
    fi
else
    echo "-> No, you don't have. It's ok if you don't want Qt4 immodule."
fi
# --- QT4 END ---

# --- MOC INFO START ---

echo
echo ========================================
if [ $QT_IM = "Y" ]; then echo -e "Qt3 moc = ${QT3_MOC_PATH}"; fi
if [ $QT4_IM = "Y" ]; then echo -e "Qt4 moc = ${QT4_MOC_PATH}"; fi
echo ========================================
echo

# --- MOC INFO END ---

if [ "$GTK"=gtk+-3.0 ]; then
  GTK_IM='N'
  echo "testing if you have GTK+ 2.x support"
  pkg-config --libs gtk+-2.0 > /dev/null 2> /dev/null
  if [ $? = 0 ]; then
    GTK_IM='Y'
  fi
  
  if [ $GTK_IM = "Y" ]; then
      if [ $use_gtk = "N" ]; then
          GTK_IM='N'
          echo "-> Yes, but disabled."
      else
          echo "-> Yes, you have GTK+ 2.x support."
      fi
  else
      echo "-> No, you don't have. It's ok if you don't want GTK+ 2.x immodule."
  fi
fi

GTK3_IM='N'
echo "testing if you have GTK+ 3.x support"
pkg-config --libs gtk+-3.0 > /dev/null 2> /dev/null
if [ $? = 0 ]; then
  GTK3_IM='Y'
fi

if [ $GTK3_IM = "Y" ]; then
    if [ $use_gtk3 = "N" ]; then
        GTK3_IM='N'
        echo "-> Yes, but disabled."
    else
        echo "-> Yes, you have GTK+ 3.x support."
    fi
else
    echo "-> No, you don't have. It's ok if you don't want GTK+ 3.x immodule."
fi

bindir=$prefix/bin
datadir=$prefix/share
mandir=$datadir/man
libdir=$prefix/$LIB
includedir=$prefix/include
optdir=/opt
HIME_VERSION=`cat VERSION.hime`

BUILD_MODULE='N'
if [ $USE_ANTHY = 'Y' ] || [ $USE_CHEWING = 'Y' ]; then
  BUILD_MODULE='Y'
fi

if [ -z "$CFLAGS" ]; then
  OPTFLAGS="-Wall -Os"
else
  OPTFLAGS="$CFLAGS"
fi

if [ -z "$HIME_DEBUG" ]; then
  HIME_DEBUG='0'
else
  HIME_DEBUG=$HIME_DEBUG
fi

if [ -z "$CC" ]; then
  CC=gcc
fi

if [ -z "$CXX" ]; then
  CXX=g++
fi

# Fedora want to move /bin and /lib to /usr, hence the hack
ECHO="echo"
[ -x /usr/bin/echo ] && ECHO="/usr/bin/echo"
[ -x /bin/echo ] && ECHO="/bin/echo"

echo "CC=$CC" > config.mak
echo "CCX=$CC" >> config.mak
echo "CXX=$CXX" >> config.mak
echo "CCLD=$CC" >> config.mak
echo "MAKE=$MAKE" >> config.mak
echo "GTKINC=$GTKINC" >> config.mak
echo "prefix=$prefix" >> config.mak
echo "bindir=\$(DESTDIR)$bindir" >> config.mak
echo "mandir=\$(DESTDIR)$mandir" >> config.mak
echo "man1dir=\$(mandir)/man1" >> config.mak
echo "bindir_r=$bindir" >> config.mak
echo "datadir=\$(DESTDIR)$datadir" >> config.mak
echo "datadir_r=$datadir" >> config.mak
echo "filterdir=\$(datadir_r)/hime/filter" >> config.mak
echo "libdir=\$(DESTDIR)$libdir" >> config.mak
echo "himelibdir=\$(libdir)/hime" >> config.mak
echo "includedir=\$(DESTDIR)$includedir" >> config.mak
echo "LDFLAGS=-Wl,--as-needed -lX11 -lm" >> config.mak
echo "LDFLAGS+=$GTKLDFLAGS -lX11 -ldl" >> config.mak
echo "HIME_VERSION=$HIME_VERSION" >> config.mak
echo "HIME_TABLE_DIR=\$(datadir_r)/hime/table" >> config.mak
echo "HIME_OGG_DIR=\$(datadir_r)/hime/ogg" >> config.mak
echo "HIME_TABLE_DIR_i=\$(datadir)/hime/table" >> config.mak
echo "HIME_SCRIPT_DIR=\$(datadir_r)/hime/script" >> config.mak
echo "HIME_SCRIPT_DIR_i=\$(datadir)/hime/script" >> config.mak
echo "OPTFLAGS=$OPTFLAGS" >> config.mak
echo "DOC_DIR=\$(datadir_r)/doc/hime" >> config.mak
echo "DOC_DIR_i=\$(datadir)/doc/hime" >> config.mak
echo "HIME_ICON_DIR=\$(datadir_r)/pixmaps/hime" >> config.mak
echo "SYS_ICON_DIR=\$(datadir_r)/pixmaps" >> config.mak
echo "HIME_ICON_DIR_i=\$(datadir)/pixmaps/hime" >> config.mak
echo "HIME_BIN_DIR=\$(bindir_r)" >> config.mak
echo "FREEBSD=$FREEBSD" >> config.mak
echo "QT_IM=$QT_IM" >> config.mak
echo "QT_IM_DIR=$QT_IM_DIR" >> config.mak
echo "QT4_IM=$QT4_IM" >> config.mak
echo "QT4_IM_DIR=$QT4_IM_DIR" >> config.mak
echo "QT3_MOC_PATH=$QT3_MOC_PATH" >> config.mak
echo "QT4_MOC_PATH=$QT4_MOC_PATH" >> config.mak
echo "GTK_IM=$GTK_IM" >> config.mak
echo "GTK3_IM=$GTK3_IM" >> config.mak
echo "USE_XIM=$use_xim" >> config.mak
echo "LIB=$LIB" >> config.mak
echo "MAC_OS=$MAC_OS" >> config.mak
echo "SO_FLAGS=$SO_FLAGS" >> config.mak
echo "USE_TRAY=$use_tray" >> config.mak
echo "USE_I18N=$use_i18n" >> config.mak
echo "USE_TSIN=$use_tsin" >> config.mak
echo "USE_ANTHY=$USE_ANTHY" >> config.mak
echo "USE_CHEWING=$USE_CHEWING" >> config.mak
echo "BUILD_MODULE=$BUILD_MODULE" >> config.mak
echo "ECHO=$ECHO" >> config.mak

#if [ $prefix = /usr/local ]; then
#  echo "hime_ld_run_path=$PWD:\$(himelibdir)" >> config.mak
#  echo "HIME_DEBUG=${HIME_DEBUG}" >> config.mak
#else
  echo "hime_ld_run_path=\$(himelibdir)" >> config.mak
#fi

echo "gcc_ld_run_path=-Wl,-rpath,\$(hime_ld_run_path)" >> config.mak
